from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes, CallbackQueryHandler
import subprocess

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_DATE, SELECTING_READINGS = range(2)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ /start –∏ /cancel
reply_keyboard = [
    ["–°—Ç–∞—Ä—Ç", "–û—Ç–º–µ–Ω–∞"]
]
reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ /start –∏ /cancel
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –°–æ–∑–¥–∞–µ–º Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    keyboard = [
        [InlineKeyboardButton("–Ø–Ω–≤–∞—Ä—å 2025", callback_data="01 25")],
        [InlineKeyboardButton("–§–µ–≤—Ä–∞–ª—å 2025", callback_data="02 25")],
        [InlineKeyboardButton("–ú–∞—Ä—Ç 2025", callback_data="03 25")],
        [InlineKeyboardButton("–ê–ø—Ä–µ–ª—å 2025", callback_data="04 25")],
        [InlineKeyboardButton("–ú–∞–π 2025", callback_data="05 25")],
        [InlineKeyboardButton("–ò—é–Ω—å 2025", callback_data="06 25")],
        [InlineKeyboardButton("–ò—é–ª—å 2025", callback_data="07 25")],
        [InlineKeyboardButton("–ê–≤–≥—É—Å—Ç 2025", callback_data="08 25")],
        [InlineKeyboardButton("–°–µ–Ω—Ç—è–±—Ä—å 2025", callback_data="09 25")],
        [InlineKeyboardButton("–û–∫—Ç—è–±—Ä—å 2025", callback_data="10 25")],
        [InlineKeyboardButton("–ù–æ—è–±—Ä—å 2025", callback_data="11 25")],
        [InlineKeyboardButton("–î–µ–∫–∞–±—Ä—å 2025", callback_data="12 25")],
        [InlineKeyboardButton("–Ø–Ω–≤–∞—Ä—å 2026", callback_data="01 26")],
        [InlineKeyboardButton("–§–µ–≤—Ä–∞–ª—å 2026", callback_data="02 26")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup
    )
    return SELECTING_DATE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
async def date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    user_data['month'], user_data['year'] = query.data.split()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    return await show_readings_buttons(update, context)

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
async def show_readings_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∫–∞–∑–∞–Ω–∏–π
    buttons = []
    if 'water' not in user_data:
        buttons.append([InlineKeyboardButton("–í–æ–¥–∞ üö∞", callback_data="water")])
    if 'gas' not in user_data:
        buttons.append([InlineKeyboardButton("–ì–∞–∑ ‚õΩÔ∏è", callback_data="gas")])
    if 'electricity' not in user_data:
        buttons.append([InlineKeyboardButton("–°–≤–µ—Ç üí°", callback_data="electricity")])
    
    reply_markup = InlineKeyboardMarkup(buttons)
    
    if buttons:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–∏–ø—ã –ø–æ–∫–∞–∑–∞–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "–í–Ω–µ—Å–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è:", reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–í–Ω–µ—Å–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤:", reply_markup=reply_markup
            )
    else:
        # –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        return await process_data(update, context)
    
    return SELECTING_READINGS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
async def readings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–æ–∫–∞–∑–∞–Ω–∏–π
    user_data['current_type'] = query.data
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    if query.data == "water":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥—ã:")
    elif query.data == "gas":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–∞–∑–∞:")
    elif query.data == "electricity":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–≤–µ—Ç–∞:")
    
    return SELECTING_READINGS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
async def input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–æ–∫–∞–∑–∞–Ω–∏–π
    if 'current_type' not in user_data:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –ø–æ–∫–∞–∑–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∫–∞–∑–∞–Ω–∏–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."
        )
        return SELECTING_READINGS
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not user_input.isdigit():
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –∫–∞–∫ —á–∏—Å–ª–æ:"
        )
        return SELECTING_READINGS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_data['current_type'] == "water":
        user_data['water'] = user_input
    elif user_data['current_type'] == "gas":
        user_data['gas'] = user_input
    elif user_data['current_type'] == "electricity":
        user_data['electricity'] = user_input
    
    # –£–¥–∞–ª—è–µ–º current_type –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    del user_data['current_type']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    return await show_readings_buttons(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ PayService.exe
async def process_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ PayService.exe
    data_to_send = (
        f"{user_data['month']} {user_data['year']}\n"
        f"{user_data['water']}\n"
        f"{user_data['gas']}\n"
        f"{user_data['electricity']}\n"
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É PayService.exe –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ stdin
        process = subprocess.Popen(
            ["PayService.exe"],  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PayService.exe –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        stdout, stderr = process.communicate(input=data_to_send)
        
        if process.returncode == 0:
            # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(f"{stdout}")
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:\n{stderr}")
    
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ PayService.exe –Ω–µ –Ω–∞–π–¥–µ–Ω)
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ /start –∏ /cancel
    await update.message.reply_text(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ /start.", reply_markup=reply_markup
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ /start –∏ /cancel
    await update.message.reply_text(
        "‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=reply_markup
    )
    return ConversationHandler.END

def main():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
    application = ApplicationBuilder().token("–í–ê–® –¢–û–ö–ï–ù").build()

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_DATE: [CallbackQueryHandler(date_handler)],
            SELECTING_READINGS: [
                CallbackQueryHandler(readings_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_handler)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã per_*
        per_chat=True,  # –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        per_user=True,   # –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        per_message=False  # –ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
